{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to My CTF Blog","text":"<p>I post CTF write-ups, notes, and tools here.</p>"},{"location":"potato/","title":"Potato \u2014 Proving Grounds (write-up)","text":"<p>Difficulty: Easy / Beginner Box: Potato (Proving Grounds) Author: dkrxhn Date: 2025-09-22</p>"},{"location":"potato/#tldr","title":"TL;DR","text":"<p>Initial web login didn\u2019t accept the apparent credentials. Enumeration \u2192 fuzzing revealed hints in logs but no direct access. Final access came from an SSH brute force (<code>nmap --script ssh-brute</code>), which found <code>webadmin:dragon</code>. From there a small privilege escalation via a writable <code>notes</code> file and <code>sudo</code> allowed getting root.</p>"},{"location":"potato/#target-info","title":"Target info","text":"<ul> <li>Host: <code>192.168.103.101</code> (and later <code>192.168.152.101</code> after a reset)</li> <li>Services discovered (relevant): <code>22/tcp (ssh)</code>, <code>80/tcp (http)</code>, <code>2112/tcp (ftp)</code> </li> </ul>"},{"location":"potato/#enumeration","title":"Enumeration","text":"<p>I started with basic network/service enumeration (nmap):</p> <pre><code>sudo nmap -Pn -n 192.168.103.101 -sCV -p- --open -vvv\n</code></pre> <p></p> <p>Downloaded <code>index.php.bak</code> from open FTP service on atypical port 2112, which contained username and password, but did not work.</p> <p> </p> <p>I also ran directory/file discovery and wordlist-based fuzzing (example):</p> <pre><code>feroxbuster -u http://192.168.152.101 -w /usr/share/wordlists/dirb/common.txt -n --add-slash\n</code></pre> <p></p> <ul> <li> <p><code>/admin</code> exists and has a login page. </p> </li> <li> <p>Fuzzing <code>/admin</code> for hidden files revealed /logs subdirectory that was not useful</p> </li> </ul> <p>The .bak file suggested the <code>admin:potato</code> credential but it did not login. Knowing Offsec, this could be a rabbit hole.</p>"},{"location":"potato/#pivot-ssh-brute-force","title":"Pivot: SSH brute force","text":"<p>Because the web login didn\u2019t work and logs hinted at changes, I attempted an SSH brute force using nmap\u2019s <code>ssh-brute</code> NSE script:</p> <pre><code>nmap -p 22 --script=/usr/share/nmap/scripts/ssh-brute.nse 192.168.152.101 -oN scans/nmap-ssh-brute.txt\n</code></pre> <p></p> <p>Result: <code>webadmin:dragon</code> (valid credentials found).</p> <p>I verified manually and connected via SSH.</p>"},{"location":"potato/#privesc","title":"Privesc","text":"<p>Once on the machine as <code>webadmin</code> I found some interesting sudo privileges via <code>sudo -l</code>:</p> <p></p> <p>Escalation step I used to get root:</p> <pre><code>sudo /bin/nice /notes/../bin/sh\n</code></pre>"},{"location":"potato/#walkthrough-correct-path","title":"Walkthrough / Correct path","text":"<ul> <li><code>admin:potato</code> looked promising (found in .bak file) but did not actually log in. The walkthrough referenced a strcmp bypass found in the .bak file. In short: the site code assumed the password POST parameter was a string and compared it using a string-compare routine. By editing the request in Burp and sending password[]= (i.e. making password an array), the server received the wrong type and the comparison behaved unexpectedly, allowing login as long as the username was correct. This is a type-validation bug \u2014 it works only because the application failed to validate input types before comparing credentials.</li> </ul> <p>After that, proxy the logs section within the admin dashboard, which allows for an LFI.</p> <p></p> <p>/etc/passwd shows the hash for webadmin, which can be cracked very easily with john.</p> <p>The walkthrough also did the Privesc slightly differently by creating a shell in the home directory and leveraging that with the sudo command instead of <code>/bin/sh</code>, which seems like an unneccesary extra step to me. Not sure why that is suggested.</p>"},{"location":"potato/#lessons-takeaways","title":"Lessons &amp; takeaways","text":"<ul> <li>Don\u2019t overlook the code in a file, even if it appears to be leaking creds</li> <li>When web login fails and enumeration hints at other services, pivot to other protocols (SSH, FTP, etc.). Although not very practical for a real engagement, SSH bruteforce on a CTF can sometimes work!</li> </ul>"}]}