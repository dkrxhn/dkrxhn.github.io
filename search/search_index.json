{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to My CTF Blog","text":"<p>I post CTF write-ups, notes, and tools here.</p>"},{"location":"potato/","title":"Potato \u2014 Proving Grounds (write-up)","text":"<p>Difficulty: Easy / Beginner Box: Potato (Proving Grounds) Author: dkrxhn Date: 2025-09-22</p>"},{"location":"potato/#tldr","title":"TL;DR","text":""},{"location":"potato/#initial-web-login-didnt-accept-the-apparent-credentials-enumeration-revealed-hints-in-logs-but-no-direct-access-final-access-came-from-an-ssh-brute-force-nmap-script-ssh-brute-which-found-webadmindragon-from-there-a-small-privilege-escalation-via-notes-file-that-can-be-run-with-sudo-privileges-allowed-for-root-access","title":"Initial web login didn\u2019t accept the apparent credentials. Enumeration revealed hints in logs but no direct access. Final access came from an SSH brute force (<code>nmap --script ssh-brute</code>), which found <code>webadmin:dragon</code>. From there a small privilege escalation via <code>notes</code> file that can be run with sudo privileges allowed for root access.","text":""},{"location":"potato/#target-info","title":"Target info","text":"<ul> <li>Host: <code>192.168.103.101</code> (and later <code>192.168.152.101</code> after a reset)</li> <li>Services discovered: <code>22/tcp (ssh)</code>, <code>80/tcp (http)</code>, <code>2112/tcp (ftp)</code> </li> </ul>"},{"location":"potato/#enumeration","title":"Enumeration","text":"<p>I started with basic network/service enumeration (nmap):</p> <pre><code>sudo nmap -Pn -n 192.168.103.101 -sCV -p- --open -vvv\n</code></pre> <p></p> <p>Downloaded <code>index.php.bak</code> from open FTP service on atypical port 2112, which contained username and password, but did not work anywhere.</p> <p> </p> <p>I also ran feroxbuster to fuzz for subdirectories:</p> <pre><code>feroxbuster -u http://192.168.152.101 -w /usr/share/wordlists/dirb/common.txt -n --add-slash\n</code></pre> <p></p> <ul> <li><code>/admin</code> exists and has a login page.</li> </ul> <p></p> <ul> <li>Fuzzing <code>/admin</code> revealed <code>/logs</code> subdirectory but was not useful. Logs only showed the password was changed a couple times.</li> </ul>"},{"location":"potato/#the-bak-file-suggested-the-adminpotato-credential-but-it-did-not-login-tried-other-common-combinations-but-no-luck-knowing-offsec-this-could-be-a-rabbit-hole","title":"The .bak file suggested the <code>admin:potato</code> credential but it did not login. Tried other common combinations, but no luck. Knowing Offsec, this could be a rabbit hole.","text":""},{"location":"potato/#pivot-ssh-brute-force","title":"Pivot: SSH brute force","text":""},{"location":"potato/#because-the-web-login-didnt-work-and-logs-hinted-at-changes-i-attempted-an-ssh-brute-force-using-nmaps-ssh-brute-nse-script","title":"Because the web login didn\u2019t work and logs hinted at changes, I attempted an SSH brute force using nmap\u2019s <code>ssh-brute</code> NSE script:","text":"<pre><code>nmap -p 22 --script=/usr/share/nmap/scripts/ssh-brute.nse 192.168.152.101 -oN scans/nmap-ssh-brute.txt\n</code></pre> <p>Result: Found valid credentials <code>webadmin:dragon</code></p>"},{"location":"potato/#i-verified-manually-and-connected-via-ssh","title":"I verified manually and connected via SSH.","text":""},{"location":"potato/#privesc","title":"Privesc","text":"<p>Once on the machine as <code>webadmin</code> I found some interesting sudo privileges via <code>sudo -l</code>:</p> <p></p> <p>Escalation step I used to get root:</p> <pre><code>sudo /bin/nice /notes/../bin/sh\n</code></pre>"},{"location":"potato/#walkthrough-correct-path","title":"Walkthrough / Correct path","text":"<ul> <li><code>admin:potato</code> looked promising (found in .bak file) but did not actually log in. The walkthrough referenced a strcmp bypass found in the .bak file. In short: the site code assumed the password POST parameter was a string and compared it using a string-compare routine. By editing the request and adding brackets to the variable in Burp and sending password[]= (i.e. making password an array), the server received the wrong type and the comparison behaved unexpectedly, allowing login as long as the username was correct. This is a type-validation bug. It works only because the application failed to validate input types before comparing credentials.</li> </ul> <p>After that, use burp to proxy the logs section within the admin dashboard, which allows for an LFI.</p> <p></p> <p><code>/etc/passwd</code> shows the hash for webadmin, which can be cracked very easily with john.</p>"},{"location":"potato/#the-walkthrough-also-did-the-privesc-slightly-differently-by-creating-a-shell-in-the-home-directory-and-leveraging-that-with-the-sudo-command-instead-of-simply-using-the-built-in-shell-binsh-seems-like-an-unneccesary-extra-step","title":"The walkthrough also did the privesc slightly differently by creating a shell in the home directory and leveraging that with the sudo command instead of simply using the built in shell <code>/bin/sh</code>. Seems like an unneccesary extra step.","text":""},{"location":"potato/#lessons-takeaways","title":"Lessons &amp; takeaways","text":"<ul> <li>Don\u2019t overlook the code in a file, even if it appears to be leaking creds</li> <li>When web login fails and enumeration hints at other services, pivot to other protocols (SSH, FTP, etc.). Although not very practical for a real engagement, SSH bruteforce on a CTF can sometimes work!</li> </ul>"}]}